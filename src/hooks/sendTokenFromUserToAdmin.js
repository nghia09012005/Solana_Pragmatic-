import {
    Connection,
    PublicKey,
    Transaction,
    clusterApiUrl,
  } from "@solana/web3.js";
  import {
    getOrCreateAssociatedTokenAccount,
    createTransferInstruction,
  } from "@solana/spl-token";
  
  const MINT_ADDRESS = new PublicKey("8u6RLoUAxMFhXZTMeQ4uFMPPu9HHGyDVVgrgAyXw4HCy"); // SPL Token
  const ADMIN_PUBLIC_KEY = new PublicKey("EwUaDKLFC4cukzHNWyhwAKttbogLs7KGm8SEQPpAkcjj"); // üëà Thay b·∫±ng public key admin th·∫≠t
  
  /**
   * G·ª≠i token SPL t·ª´ v√≠ Phantom (ng∆∞·ªùi d√πng) sang v√≠ admin
   * @param {number} amount - S·ªë l∆∞·ª£ng token (ch∆∞a nh√¢n v·ªõi decimals)
   * @param {string} network - M·∫°ng Solana ('devnet' ho·∫∑c 'mainnet-beta'), m·∫∑c ƒë·ªãnh l√† 'devnet'
   * @returns {Promise<string>} - Transaction signature
   */
  async function sendTokenFromUserToAdmin(amount, network = "devnet") {
    try {
      if (typeof amount !== "number" || amount <= 0) {
        throw new Error("Amount ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng");
      }
  
      const DECIMALS = 6; // S·ªë decimals c·ªßa token, ƒë·ªïi n·∫øu token kh√°c
  
      const provider = window.solana;
      if (!provider?.isPhantom) throw new Error("Phantom wallet kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y");
  
      // 1. K·∫øt n·ªëi v√≠ Phantom (n·∫øu ƒë√£ k·∫øt n·ªëi th√¨ c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng)
      const { publicKey: userPublicKey } = await provider.connect();
  
      const connection = new Connection(clusterApiUrl(network), "confirmed");
  
      // 2. L·∫•y ho·∫∑c t·∫°o ATA cho ng∆∞·ªùi d√πng v√† admin
      const userTokenAccount = await getOrCreateAssociatedTokenAccount(
        connection,
        userPublicKey,     // payer ch·ªãu ph√≠
        MINT_ADDRESS,
        userPublicKey
      );
  
      const adminTokenAccount = await getOrCreateAssociatedTokenAccount(
        connection,
        userPublicKey,     // payer v·∫´n l√† user
        MINT_ADDRESS,
        ADMIN_PUBLIC_KEY
      );
  
      // 3. Chu·∫©n b·ªã amount d∆∞·ªõi d·∫°ng bigint
      const amountToSend = BigInt(Math.floor(amount * 10 ** DECIMALS));
  
      // 4. T·∫°o giao d·ªãch chuy·ªÉn token
      const tx = new Transaction().add(
        createTransferInstruction(
          userTokenAccount.address,
          adminTokenAccount.address,
          userPublicKey,
          amountToSend
        )
      );
  
      tx.feePayer = userPublicKey;
      tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
  
      // 5. K√Ω giao d·ªãch
      const signed = await provider.signTransaction(tx);
  
      // 6. G·ª≠i giao d·ªãch l√™n m·∫°ng
      const txid = await connection.sendRawTransaction(signed.serialize());
      await connection.confirmTransaction(txid);
  
      console.log("Giao d·ªãch th√†nh c√¥ng:", txid);
      return txid;
  
    } catch (err) {
      console.error("L·ªói khi chuy·ªÉn token:", err);
      throw err;
    }
  }
  
  export default sendTokenFromUserToAdmin;
  