import React, { useState, useEffect } from 'react';
import Loading from './Loading';
import '../../styles/CuChiStyle/Morse.css';
import ReactAudioPlayer from 'react-audio-player';
import audioFile from '../../assets/CuChiGame/audio/morse.wav'; // Import t·ªáp √¢m thanh
import characterImg from '../../assets/CuChiGame/images/MODEL_CUCHI_NOBG.png'; // Nh√¢n v·∫≠t
import { useNavigate } from 'react-router-dom';
import morsetable from '../../assets/CuChiGame/images/Morse.png';
import diadaomap from '../../assets/CuChiGame/images/Bandodiadao.jpg';
// morse sound
import m1 from '../../assets/CuChiGame/audio/CUCHICON.wav';
import m2 from '../../assets/CuChiGame/audio/SAIGONMAT.wav';
import confetti from 'canvas-confetti';
import Swal from 'sweetalert2';
import letter from '../../assets/CuChiGame/images/successletter.png';
import { Link } from 'react-router-dom';


const Morse = () => {
    const [loading, setLoading] = useState(false); // mu·ªën load th√¨ ƒë·ªïi th√†nh true
    const [dialogStep, setDialogStep] = useState(0); // B·∫Øt ƒë·∫ßu lu√¥n t·ª´ c√¢u ƒë·∫ßu
    const [showAlert, setShowAlert] = useState(true); // Qu·∫£n l√Ω tr·∫°ng th√°i alert
    const [audioPlaying, setAudioPlaying] = useState(false); // Tr·∫°ng th√°i nh·∫°c
    const navigate = useNavigate();
    const [userInput, setUserInput] = useState('');
    const [isBookOpen, setIsBookOpen] = useState(false);
    const [showMenu, setShowMenu] = useState(false);
    const [showBook, setShowBook] = useState(false); // State to control book visibility

    const dialogues = [
      'T√¨nh b√°o t·ª´ S√†i G√≤n v√† H√† N·ªôi v·ª´a g·ª≠i m·∫≠t th∆∞ kh·∫©n c·∫•p! ƒê·ªìng ch√≠ h√£y gi·∫£i m√£ ngay ƒë·ªÉ ch√∫ng ta c√≥ th·ªÉ tri·ªÉn khai k·∫ø ho·∫°ch. ƒê·ª´ng ch·∫ßn ch·ª´ k·∫ªo l·ª° m·∫•t th·ªùi c∆° ph·∫£n c√¥ng!',
      'Ch√†o m·ª´ng ƒë·ªìng ch√≠ t√¨nh b√°o! Nhi·ªám v·ª• c·ªßa ch√∫ng ta b√¢y gi·ªù l√† gi·∫£i m√£ nh·ªØng th√¥ng ƒëi·ªáp b√≠ m·∫≠t n√†y. ƒê√¢y l√† b·∫£ng m√£ Morse, c√¥ng c·ª• quan tr·ªçng ƒë·ªÉ gi·∫£i m√£ m·∫≠t th∆∞.',
      'ƒê·ªìng ch√≠ h√£y lu√¥n trong t∆∞ th·∫ø s·∫µn s√†ng! M·ªói gi√¢y ph√∫t ƒë·ªÅu qu√Ω gi√° trong nhi·ªám v·ª• n√†y!',
      'B·∫Øt ƒë·∫ßu th√¥i n√†o! H√£y l·∫Øng nghe k·ªπ nh·ªØng t√≠n hi·ªáu Morse v√† gi·∫£i m√£ ch√∫ng!',
      'C√≥ v·∫ª ƒë·ªìng ch√≠ l√† ng∆∞·ªùi m·ªõi, t√¥i s·∫Ω gi·∫£i th√≠ch v·ªÅ h·ªá th·ªëng m√£ Morse. ƒê√¢y l√† m·ªôt ph∆∞∆°ng ph√°p truy·ªÅn tin c·ª±c k·ª≥ th√¥ng minh!',
      'N√≥ s·ª≠ d·ª•ng c√°c t√≠n hi·ªáu ng·∫Øn v√† d√†i ƒë·ªÉ bi·ªÉu th·ªã c√°c ch·ªØ c√°i v√† s·ªë.',
      'M·ªói k√Ω t·ª± trong b·∫£ng ch·ªØ c√°i ƒë·ªÅu c√≥ m·ªôt m√£ ri√™ng. V√≠ d·ª•, ch·ªØ A l√† ".-", ch·ªØ B l√† "-...". ƒê·ªìng ch√≠ h√£y nh√¨n v√†o b·∫£ng m√£ ƒë·ªÉ hi·ªÉu r√µ h∆°n.',
      'Trong th·ªùi chi·∫øn, m√£ Morse l√† m·ªôt ph∆∞∆°ng ti·ªán li√™n l·∫°c c·ª±c k·ª≥ quan tr·ªçng. N√≥ gi√∫p ch√∫ng ta truy·ªÅn tin m·ªôt c√°ch b√≠ m·∫≠t v√† hi·ªáu qu·∫£.',
      'B√¢y gi·ªù, ƒë·ªìng ch√≠ h√£y l·∫Øng nghe k·ªπ nh·ªØng t√≠n hi·ªáu t·ª´ S√†i G√≤n v√† H√† N·ªôi. M·ªói th√¥ng ƒëi·ªáp ƒë·ªÅu ch·ª©a ƒë·ª±ng th√¥ng tin quan tr·ªçng!',
      'H√£y t·∫≠p trung v√† gi·∫£i m√£ th·∫≠t ch√≠nh x√°c. M·ªói k√Ω t·ª± ƒë·ªÅu c√≥ √Ω nghƒ©a ri√™ng c·ªßa n√≥!'
    ];

    const [showhint1, sethint1] = useState(false);
    const [showhint2, sethint2] = useState(false);
    const hint =[
      'N∆°i ƒë·ªìng ch√≠ v√† ch√∫ng ta ƒëang c√≥ m·∫∑t!!!!',
      'ƒêi·ªÅu ch√∫ng ta h∆∞·ªõng ƒë·∫øn',
    ]

    
  
    // useEffect(() => {
    //   // Th·ªùi gian ch·ªù cho loading
    //   const timer = setTimeout(() => setLoading(false), 3000);
    //   return () => clearTimeout(timer);
    // }, []);

   
    useEffect(() => {
      const audio = new Audio(audioFile);
      audio.loop = true;
    
      audio.play().catch((err) => console.log("Error playing audio:", err));
    
      return () => {
        audio.pause();        // üëà D·ª´ng nh·∫°c
        audio.currentTime = 0; // üëà Reset v·ªÅ ƒë·∫ßu (tu·ª≥ ch·ªçn)
      };
    }, []);

    const [inputSG, setInputSG] = useState('');
    const [inputHN, setInputHN] = useState('');
    const [sgfinish, setsgfinish] = useState(false);
    const [hnfinish, sethnfinish] = useState(false);
    const [sgalert, setsgalert] = useState(false);
    const [hnalert, sethnalert] = useState(false);
    const [sgIncorrect, setSgIncorrect] = useState(false);
    const [hnIncorrect, setHnIncorrect] = useState(false);
    //overlay screen
    const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);
    const [receiveoverlay, setrece] = useState(false);

    //
    // fire
    useEffect(() => {
      let interval;
      if (showSuccessOverlay) {
        fireConfetti();
        interval = setInterval(fireConfetti, 250);
        // SweetAlert2 popup
        Swal.fire({
          icon: 'success',
          title: 'Ho√†n th√†nh gi·∫£i m√£!',
          text: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ gi·∫£i m√£ th√†nh c√¥ng!',
          confirmButtonText: 'OK',
          allowOutsideClick: false,
          customClass: {
            popup: 'swal2-morse-success',
          },
        }).then(() => {
          setShowSuccessOverlay(false);
        });
        // D·ªçn d·∫πp interval khi component unmount ho·∫∑c showSuccessOverlay thay ƒë·ªïi
        return () => {
          clearInterval(interval);
        };
      }
      return () => clearInterval(interval);
    }, [showSuccessOverlay]);

    // letter 
    useEffect(() => {
      if (sgfinish && hnfinish) {
        // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi hi·ªÉn th·ªã overlay letter v√† b·∫Øn ph√°o b√¥ng
        const timeout = setTimeout(async () => {
          // B·∫Øt ƒë·∫ßu b·∫Øn ph√°o b√¥ng
          fireConfetti();
    
          // Hi·ªÉn th·ªã overlay letter
          setrece(true); // Hi·ªÉn th·ªã overlay letter

          // Set the co item
          await setCoItem();
        }, 3000); // ƒê·∫∑t th·ªùi gian delay 3 gi√¢y (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh th·ªùi gian n√†y)
    
        // D·ªçn d·∫πp timeout khi component unmount ho·∫∑c tr·∫°ng th√°i thay ƒë·ªïi
        return () => clearTimeout(timeout);
      }
    }, [sgfinish, hnfinish]); 


    
    const fireConfetti = () => {
      const duration = 1.5 * 1000;
      const animationEnd = Date.now() + duration;
      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 9999 };
    
      const interval = setInterval(function () {
        const timeLeft = animationEnd - Date.now();
    
        if (timeLeft <= 0) {
          return clearInterval(interval);
        }
    
        const particleCount = 50 * (timeLeft / duration);
        // B·∫Øn ng·∫´u nhi√™n kh·∫Øp m√†n
        confetti({
          ...defaults,
          particleCount,
          origin: { x: Math.random(), y: Math.random() - 0.2 },
          colors: ['#ff0000', '#ffff00', '#00ffcc', '#ffffff'],
        });
      }, 250);
    };
    
    //

    const updateUserStats = async (object) => {
      try {
        const token = localStorage.getItem('token');
        const username = localStorage.getItem('username');
        const response = await fetch('/api/users/stats/me', {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            username: username,
            object: object,
            amount: 200
          })
        });

        if (!response.ok) {
          throw new Error(`Failed to update ${object}`);
        }

        const data = await response.json();
        console.log(`${object} updated:`, data);
      } catch (error) {
        console.error(`Error updating ${object}:`, error);
      }
    };

    const setCoItem = async () => {
      try {
        const token = localStorage.getItem('token');
        const username = localStorage.getItem('username');
        const response = await fetch('/api/users/stats/set', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            username: username,
            item: "thu"
          })
        });

        if (!response.ok) {
          throw new Error('Failed to set co item');
        }

        const data = await response.json();
        console.log('Co item set:', data);
      } catch (error) {
        console.error('Error setting co item:', error);
      }
    };

    const handleSubmitSG = async () => {
      const words = inputSG.trim().split(/\s+/);
      const upperWords = words.map(w => w.toUpperCase());
      
      if ( (upperWords.includes("CU") && upperWords.includes("CHI") && upperWords.length === 2 ) || (upperWords.includes("C·ª¶") && upperWords.includes("CHI")  ) && upperWords.length === 2) {
        setsgfinish(true);
        setsgalert(true);
        sethnalert(false);
        setShowAlert(false);
        setSgIncorrect(false);
        Swal.fire({
          icon: 'success',
          title: 'Ho√†n th√†nh gi·∫£i m√£!',
          text: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ gi·∫£i m√£ th√†nh c√¥ng!',
          confirmButtonText: 'OK',
          allowOutsideClick: false,
          customClass: {
            popup: 'swal2-morse-success',
          },
        });
        await updateUserStats("money");
        await updateUserStats("exp");
      } else {
        sethint1(true);
        sethint2(false);
        sethnalert(false);
        setShowAlert(false);
        setsgalert(false);
        setSgIncorrect(true);
        setTimeout(() => setSgIncorrect(false), 1000);
      }
    };
    
    const handleSubmitHN = async () => {
      const words = inputHN.trim().split(/\s+/);
      const upperWords = words.map(w => w.toUpperCase());
      
      if ((upperWords.includes("THONG") && upperWords.includes("NHAT") && upperWords.length === 2) || (upperWords.includes("TH·ªêNG") && upperWords.includes("NH·∫§T") )&& upperWords.length === 2) {
        sethnfinish(true);
        sethnalert(true);
        setShowAlert(false);
        setsgalert(false);
        setHnIncorrect(false);
        Swal.fire({
          icon: 'success',
          title: 'Ho√†n th√†nh gi·∫£i m√£!',
          text: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ gi·∫£i m√£ th√†nh c√¥ng!',
          confirmButtonText: 'OK',
          allowOutsideClick: false,
          customClass: {
            popup: 'swal2-morse-success',
          },
        });
        await updateUserStats("money");
        await updateUserStats("exp");
      } else {
        sethint2(true);
        sethint1(false);
        sethnalert(false);
        setShowAlert(false);
        setsgalert(false);
        setHnIncorrect(true);
        setTimeout(() => setHnIncorrect(false), 1000);
      }
    };

  
    const handleNextDialog = () => {
      // N·∫øu ƒë√£ show book th√¨ kh√¥ng cho ph√©p chuy·ªÉn dialog
      if (showBook) return;
      
      if (dialogStep < dialogues.length - 1) {
        setDialogStep(dialogStep + 1);
      } else {
        // Khi ƒë·∫øn c√¢u cu·ªëi c√πng, hi·ªÉn th·ªã book v√† kh√¥ng cho chuy·ªÉn ti·∫øp n·ªØa
        setDialogStep(-1);
        setShowBook(true);
      }
    };
  
    // H√†m x·ª≠ l√Ω khi click v√†o b·∫•t k·ª≥ ƒë√¢u
    const handleClickAnywhere = () => {
      // Ch·ªâ cho ph√©p ph√°t nh·∫°c khi c√≤n trong ph·∫ßn dialog v√† ch∆∞a show book
      if (!audioPlaying && dialogStep !== -1 && !showBook) {
        setAudioPlaying(true);
      }
    };
  
    const toggleMenu = (e) => {
      e.stopPropagation();
      setShowMenu(!showMenu);
    };

    const handleMenuClick = (path) => {
      setShowMenu(false);
      navigate(path);
    };

    return (
      <div className="Morse-background">
        <div className="menu-container">
          <button className="home-button" onClick={toggleMenu}>
            <i className="fas fa-home"></i>
          </button>
          {showMenu && (
            <div className="menu-dropdown">
              <div className="menu-item" onClick={() => handleMenuClick('/')}>
                <i className="fas fa-home"></i>
                <span>Trang ch·ªß</span>
              </div>
              <div className="menu-item" onClick={() => handleMenuClick('/museumpage')}>
                <i className="fas fa-museum"></i>
                <span>B·∫£o t√†ng c√° nh√¢n</span>
              </div>
            </div>
          )}
        </div>

        {loading ? (
          <Loading />
        ) : (
          <div className="Morse-background" onClick={handleNextDialog}>

            {/* letter overlay */}
            {receiveoverlay && (
              <>
                {/* L·ªõp ph·ªß m·ªù ph√≠a sau letter overlay */}
                <div className="letter-overlay-background"></div>

                {/* Letter overlay */}
                <div className="letter-overlay">
                  <img src={letter} alt="Success Letter" className="letter-img" />
                  <Link to="/museumpage" className="button-overlay">
                    Tr·ªü l·∫°i b·∫£o t√†ng
                  </Link>
                </div>
              </>
            )}
            {/*  */}

            {/* Alert thanh th√¥ng b√°o */}
            {(showhint1 || showhint2) && (
              <>
                <div className="alert-overlay" onClick={() => { sethint1(false); sethint2(false); }} />
                <div className="alert-banner">
                  {showhint1 && <>{hint[0]}</>}
                  {showhint2 && <>{hint[1]}</>}
                  <button className="close-alert" onClick={() => { sethint1(false); sethint2(false); }}>
                    ‚ùå
                  </button>
                </div>
              </>
            )}


            {/* Nh√¢n v·∫≠t */}
            <div className="character-wrapper">
              <img 
                src={characterImg} 
                alt="Character" 
                className="character-model" 
              />
                {/* H·ªôp tho·∫°i */}
                {dialogStep !== -1 && dialogStep < dialogues.length  &&(
                  <div className="dialog-box"
                    
                    onClick={handleNextDialog}>
                    <p>{dialogues[dialogStep]}</p>
                  </div>
                )}
              </div>

            {/* Nh·∫°c n·ªÅn */}
            {audioPlaying && (
              <ReactAudioPlayer
                src={audioFile}
                autoPlay
                loop
                controls={false}
                onError={() => console.log("Error loading audio")}
              />
            )}
          </div>
        )}
        

        {/* Book Container */}
        {dialogStep === -1 && showBook && (
          <div className="book-container">
            <div className={`book ${isBookOpen ? 'open' : ''}`}>
              <div className="book-cover" onClick={() => setIsBookOpen(true)}>
                <h2>M·∫≠t Th∆∞</h2>
                <p>Nh·∫•n ƒë·ªÉ m·ªü s√°ch v√† gi·∫£i m√£ m·∫≠t th∆∞</p>
              </div>
              <div className="book-content">
                {/* Left Page - Morse Table and Map */}
                <div className="book-page-left">
                  <div className="morse-table-container">
                    <img src={morsetable} alt="Morse Table" className="mtable" />
                  </div>
                  <div className="map-container">
                    <img src={diadaomap} alt="Map" className="map" />
                  </div>
                </div>

                {/* Right Page - Answer Section */}
                <div className="book-page-right">
                  <div className="audio-groups">
                    {/* S√†i G√≤n Group */}
                    <div className="audio-group">
                      <button onClick={() => new Audio(m1).play()}>
                        M·∫≠t m√£ t·ª´ S√†i G√≤n
                      </button>
                      <div className="decode-input">
                        <input
                          type="text"
                          placeholder="Gi·∫£i m√£ g·∫•p!!!"
                          value={inputSG}
                          onChange={(e) => setInputSG(e.target.value)}
                          onKeyDown={(e) => {
                            if (e.key === 'Enter') {
                              e.preventDefault();
                              handleSubmitSG();
                            }
                          }}
                          className={sgIncorrect ? 'incorrect' : ''}
                          style={{
                            borderColor: sgfinish ? 'green' : 'initial',
                            opacity: sgfinish ? 0.5 : 1,
                            pointerEvents: sgfinish ? 'none' : 'auto'
                          }}
                        />
                        <button onClick={handleSubmitSG} disabled={sgfinish}>
                          Submit
                        </button>
                        {!sgfinish && inputSG && (
                          <p style={{ color: 'red', fontSize: '14px' }}>
                            üéñÔ∏è Nhanh ch√≥ng, ch√≠nh x√°c, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi!
                          </p>
                        )}
                        {sgfinish && (
                          <p style={{ color: 'green', fontSize: '14px', opacity: 0.5 }}>
                            ‚úÖ ƒê√£ gi·∫£i m√£ th√†nh c√¥ng!
                          </p>
                        )}
                      </div>
                    </div>

                    {/* H√† N·ªôi Group */}
                    <div className="audio-group">
                      <button onClick={() => new Audio(m2).play()}>
                        M·∫≠t m√£ t·ª´ H√† N·ªôi
                      </button>
                      <div className="decode-input">
                        <input
                          type="text"
                          placeholder="Gi·∫£i m√£ g·∫•p!!!"
                          value={inputHN}
                          onChange={(e) => setInputHN(e.target.value)}
                          onKeyDown={(e) => {
                            if (e.key === 'Enter') {
                              e.preventDefault();
                              handleSubmitHN();
                            }
                          }}
                          className={hnIncorrect ? 'incorrect' : ''}
                          style={{
                            borderColor: hnfinish ? 'green' : 'initial',
                            opacity: hnfinish ? 0.5 : 1,
                            pointerEvents: hnfinish ? 'none' : 'auto'
                          }}
                        />
                        <button onClick={handleSubmitHN} disabled={hnfinish}>
                          Submit
                        </button>
                        {!hnfinish && inputHN && (
                          <p style={{ color: 'red', fontSize: '14px' }}>
                            üéñÔ∏è Nhanh ch√≥ng, ch√≠nh x√°c, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi!
                          </p>
                        )}
                        {hnfinish && (
                          <p style={{ color: 'green', fontSize: '14px', opacity: 0.5 }}>
                            ‚úÖ ƒê√£ gi·∫£i m√£ th√†nh c√¥ng!
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="book-spine"></div>
            </div>
          </div>
        )}
      </div>
    );
  };


export default Morse;