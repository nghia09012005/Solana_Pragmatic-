import React, { useState, useEffect } from 'react';
import Loading from './Loading';
import '../../styles/CuChiStyle/Morse.css';
import ReactAudioPlayer from 'react-audio-player';
import audioFile from '../../assets/CuChiGame/audio/morse.wav'; // Import t·ªáp √¢m thanh
import characterImg from '../../assets/CuChiGame/images/MODEL_CUCHI_NOBG.png'; // Nh√¢n v·∫≠t
import { useNavigate } from 'react-router-dom';
import morsetable from '../../assets/CuChiGame/images/Morse.png';
// morse sound
import m1 from '../../assets/CuChiGame/audio/CUCHICON.wav';
import m2 from '../../assets/CuChiGame/audio/SAIGONMAT.wav';
import confetti from 'canvas-confetti';
import letter from '../../assets/CuChiGame/images/successletter.png';
import { Link } from 'react-router-dom';


const Morse = () => {
    const [loading, setLoading] = useState(false); // mu·ªën load th√¨ ƒë·ªïi th√†nh true
    const [dialogStep, setDialogStep] = useState(0); // B·∫Øt ƒë·∫ßu lu√¥n t·ª´ c√¢u ƒë·∫ßu
    const [showAlert, setShowAlert] = useState(true); // Qu·∫£n l√Ω tr·∫°ng th√°i alert
    const [audioPlaying, setAudioPlaying] = useState(false); // Tr·∫°ng th√°i nh·∫°c
    // const navigate = useNavigate();
    const [userInput, setUserInput] = useState('');
  
    const dialogues = [
      'T√¨nh b√°o ·ªü l√≤ng S√†i g√≤n v√† H√† N·ªôi v·ª´a g·ª≠i m·∫≠t th∆∞ t·ªõi, ƒë·ªìng ch√≠ gi·∫£i m√£ g·∫•p ƒë·ªÉ anh em tri·ªÉn khai. ƒë·ª´ng ch·ª´ng ch·ªù k·∫ªo l·ª° m·∫•t th·ªùi c∆° ph·∫£n c√¥ng. ƒê√¢y l√† b·∫£ng m√£ ƒë·ªÉ gi·∫£i.',
      'Ch√†o m·ª´ng ƒë·ªìng ch√≠ t√¨nh b√°o ƒë√£ ƒë·∫øn ƒë√¢y, ƒë·ªìng ch√≠ h√£y t√¨m hi·ªÉu v√† ho√†n th√†nh t·ªët nhi·ªám v·ª• ƒë∆∞·ª£c giao.',
      'ƒê·ªìng ch√≠ h√£y lu√¥n trong t∆∞ th·∫ø s·∫µn s√†ng chi·∫øn ƒë·∫•u !!!!!!!!!',
      'B·∫Øt ƒë·∫ßu th√¥i n√†o!',
      'C√≥ v·∫ª ƒë·ªìng ch√≠ l√† ng∆∞·ªùi m·ªõi t√¥i s·∫Ω gi·∫£i th√≠ch m·ªôt ch√∫t v·ªÅ n∆°i n√†y ƒë·ªÉ ƒë·ªìng ch√≠ n·∫Øm b·∫Øt.',
      'ƒê·ªãa ƒë·∫°o C·ªß Chi, c√°ch TP.HCM kho·∫£ng 70km v·ªÅ ph√≠a T√¢y B·∫Øc, l√† bi·ªÉu t∆∞·ª£ng cho s·ª± s√°ng t·∫°o v√† ki√™n c∆∞·ªùng c·ªßa qu√¢n v√† d√¢n C·ªß Chi trong cu·ªôc kh√°ng chi·∫øn ch·ªëng M·ªπ.',
      'H·ªá th·ªëng c·ªßa ta g·ªìm c√°c ƒë∆∞·ªùng h·∫ßm ƒë·ªì s·ªô v·ªõi kho·∫£ng 250km ƒë∆∞·ªùng h·∫ßm t·ªèa r·ªông nh∆∞ m·∫°ng nh·ªán, v√† g·ªìm nhi·ªÅu c√¥ng tr√¨nh li√™n ho√†n nh∆∞ chi·∫øn h√†o, ·ª• chi·∫øn ƒë·∫•u, h·∫ßm ƒÉn ng·ªß, h·ªôi h·ªçp, qu√¢n y, kho t√†ng, gi·∫øng n∆∞·ªõc, b·∫øp Ho√†ng C·∫ßm.',
      'N∆°i ƒë√¢y ƒë√£ h√¨nh th√†nh t·ª´ nh·ªØng h·∫ßm b√≠ m·∫≠t th·ªùi kh√°ng chi·∫øn ch·ªëng Ph√°p, v√† ·ªü giai ƒëo·∫°n kh√°ng chi·∫øn ch·ªëng M·ªπ n√†y n√≥ l·∫°i c√†n ph√°t tri·ªÉn m·∫°nh m·∫Ω h∆°n, ƒë·∫∑c bi·ªát sau c√°c cu·ªôc c√†n qu√©t l·ªõn c·ªßa ƒë·ªãch.',
      'Bi·ªát danh "L√†ng ng·∫ßm trong l√≤ng ƒë·∫•t": Th·ªÉ hi·ªán r√µ n√©t cu·ªôc s·ªëng v√† chi·∫øn ƒë·∫•u di·ªÖn ra d∆∞·ªõi l√≤ng ƒë·∫•t c·ªßa ch√∫ng t√¥i nh·ªØng con ng∆∞·ªùi C·ªß Chi.',
      'H√£y kh·∫Øc s√¢u nh·ªØng k·ª≥ t√≠ch h√†o h√πng n√†y ƒë·ªÉ mai n√†y khi th·ªëng nh·∫•t n√≥ kh√¥ng b·ªã mai m·ªôt ƒëi.',
    ];

    const [showhint1, sethint1] = useState(false);
    const [showhint2, sethint2] = useState(false);
    const hint =[
      'N∆°i ƒë·ªìng ch√≠ v√† ch√∫ng ta ƒëang c√≥ m·∫∑t!!!!',
      'ƒêi·ªÅu ch√∫ng ta mong mu·ªën',
    ]

    
  
    // useEffect(() => {
    //   // Th·ªùi gian ch·ªù cho loading
    //   const timer = setTimeout(() => setLoading(false), 3000);
    //   return () => clearTimeout(timer);
    // }, []);

    const [inputSG, setInputSG] = useState('');
    const [inputHN, setInputHN] = useState('');
    const [sgfinish, setsgfinish] = useState(false);
    const [hnfinish, sethnfinish] = useState(false);
    const [sgalert, setsgalert] = useState(false);
    const [hnalert, sethnalert] = useState(false);
    //overlay screen
    const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);
    const [receiveoverlay, setrece] = useState(false);

    //
    // fire
    useEffect(() => {
      let interval;
      if (showSuccessOverlay) {
        fireConfetti(); // B·∫Øt ƒë·∫ßu b·∫Øn ph√°o b√¥ng
        interval = setInterval(fireConfetti, 250); // Ti·∫øp t·ª•c b·∫Øn ph√°o b√¥ng m·ªói 250ms
    
        // Sau 3 gi√¢y ·∫©n overlay v√† d·ª´ng ph√°o b√¥ng
        const timeout = setTimeout(() => {
          setShowSuccessOverlay(false);
          clearInterval(interval); // H·ªßy b·∫Øn ph√°o b√¥ng khi overlay b·ªã ·∫©n
        }, 3000);
    
        // D·ªçn d·∫πp timeout v√† interval khi component unmount ho·∫∑c showSuccessOverlay thay ƒë·ªïi
        return () => {
          clearTimeout(timeout);
          clearInterval(interval);
        };
      }
      // N·∫øu showSuccessOverlay kh√¥ng c√≥ gi√° tr·ªã true, h√£y h·ªßy ph√°o b√¥ng
      return () => clearInterval(interval);
    
    }, [showSuccessOverlay]);

    // letter 
    useEffect(() => {
      if (sgfinish && hnfinish) {
        // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi hi·ªÉn th·ªã overlay letter v√† b·∫Øn ph√°o b√¥ng
        const timeout = setTimeout(() => {
          // B·∫Øt ƒë·∫ßu b·∫Øn ph√°o b√¥ng
          fireConfetti();
    
          // Hi·ªÉn th·ªã overlay letter
          setrece(true); // Hi·ªÉn th·ªã overlay letter
        }, 3000); // ƒê·∫∑t th·ªùi gian delay 3 gi√¢y (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh th·ªùi gian n√†y)
    
        // D·ªçn d·∫πp timeout khi component unmount ho·∫∑c tr·∫°ng th√°i thay ƒë·ªïi
        return () => clearTimeout(timeout);
      }
    }, [sgfinish, hnfinish]); 


    
    const fireConfetti = () => {
      const duration = 1.5 * 1000;
      const animationEnd = Date.now() + duration;
      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 9999 };
    
      const interval = setInterval(function () {
        const timeLeft = animationEnd - Date.now();
    
        if (timeLeft <= 0) {
          return clearInterval(interval);
        }
    
        const particleCount = 50 * (timeLeft / duration);
        // B·∫Øn ng·∫´u nhi√™n kh·∫Øp m√†n
        confetti({
          ...defaults,
          particleCount,
          origin: { x: Math.random(), y: Math.random() - 0.2 },
          colors: ['#ff0000', '#ffff00', '#00ffcc', '#ffffff'],
        });
      }, 250);
    };
    
    //

    const handleSubmitSG = () => {
      const words = inputSG.trim().split(/\s+/);
      const upperWords = words.map(w => w.toUpperCase());
      
      if ( (upperWords.includes("CU") && upperWords.includes("CHI") && upperWords.length === 2 ) || (upperWords.includes("C·ª¶") && upperWords.includes("CHI")  ) && upperWords.length === 2) {
        setsgfinish(true);
        // alert("Gi·∫£i m√£ th√†nh c√¥ng!")
        setsgalert(true);
        sethnalert(false);
        setShowAlert(false);
        setShowSuccessOverlay(true);

        
      } else {
        sethint1(true);
        sethint2(false);
        sethnalert(false);
        setShowAlert(false);
        setsgalert(false);
      }
    };
    
    const handleSubmitHN = () => {
      const words = inputHN.trim().split(/\s+/);
      const upperWords = words.map(w => w.toUpperCase());
      
      if ((upperWords.includes("THONG") && upperWords.includes("NHAT") && upperWords.length === 2) || (upperWords.includes("TH·ªêNG") && upperWords.includes("NH·∫§T") )&& upperWords.length === 2) {
        sethnfinish(true);
        sethnalert(true);
        setShowAlert(false);
        setsgalert(false);
        setShowSuccessOverlay(true);
    
        
        // alert("Gi·∫£i m√£ th√†nh c√¥ng!")
      } else {
        sethint2(true);
        sethint1(false);
        sethnalert(false);
        setShowAlert(false);
        setsgalert(false);
      }
    };

  
    const handleNextDialog = () => {
      if (dialogStep < dialogues.length - 1) {
        setDialogStep(dialogStep + 1);
      } else {
        // K·∫øt th√∫c h·ªôi tho·∫°i, ·∫©n text box
        // setDialogStep(-1);
        
      }
    };
  
    // H√†m x·ª≠ l√Ω khi click v√†o b·∫•t k·ª≥ ƒë√¢u
    const handleClickAnywhere = () => {
      if (!audioPlaying) {
        setAudioPlaying(true);
      }
    };
  
    return (
      <>
        {loading ? (
          <Loading />
        ) : (
          <div className="Morse-background" onClick={handleClickAnywhere}>

            {/* overlay */}
            {showSuccessOverlay && (
          <div className="success-overlay">
        <div className="success-content">
      ‚úÖ Ho√†n th√†nh gi·∫£i m√£!
        </div>
        </div>
        )}
            {/*  */}

            {/* letter overlay */}
            {receiveoverlay && (
  <>
    {/* L·ªõp ph·ªß m·ªù ph√≠a sau letter overlay */}
    <div className="letter-overlay-background"></div>

    {/* Letter overlay */}
    <div className="letter-overlay">
      <img src={letter} alt="Success Letter" className="letter-img" />
      <Link to="/" className="button-overlay">
        Ti·∫øp t·ª•c
      </Link>
    </div>
  </>
)}
            {/*  */}

            {/* Alert thanh th√¥ng b√°o */}
            {showAlert && (
              <div className="alert-banner">
                üéñÔ∏è Ch√∫ng ta nh·∫≠n ƒë∆∞·ª£c m·∫≠t th∆∞, GI·∫¢I M√É G·∫§P!!!!!!!!<br />
                ‚ùå C√¥ng ngh·ªá c·ªßa ta c√≤n h·∫°n ch·∫ø n√™n h√£y gi·∫£i tu·∫ßn t·ª± ƒë·ªÉ kh√¥ng b·ªã nhi·ªÖu s√≥ng!!!!!
                <button className="close-alert" onClick={() => setShowAlert(false) }>
                  ‚ùå
                </button>
              </div>
            )}

          {showhint1 && (
              <div className="alert-banner">
                üéñÔ∏èG·ª¢I √ù: {hint[0]}
                <button className="close-alert" onClick={() => sethint1(false) }>
                  ‚ùå
                </button>
              </div>
            )}
            {showhint2 && (
              <div className="alert-banner">
                üéñÔ∏èG·ª¢I √ù: {hint[1]}
                <button className="close-alert" onClick={() => sethint2(false) }>
                  ‚ùå
                </button>
              </div>
            )}


          {sgalert && (
              <div className="alert-banner">
                üéñÔ∏è GI·∫¢I M√É TH√ÄNH C√îNG M·∫¨T M√É T·ª™ S√ÄI G√íN !!!!!!!!<br />
                
                <button className="close-alert" onClick={() => setsgalert(false)}>
                  ‚ùå
                </button>
              </div>
            )}    

          {hnalert && (
              <div className="alert-banner">
                üéñÔ∏è GI·∫¢I M√É TH√ÄNH C√îNG M·∫¨T M√É T·ª™ H√Ä N·ªòI !!!!!!!!<br />
                
                <button className="close-alert" onClick={() => sethnalert(false)}>
                  ‚ùå
                </button>
              </div>
            )}   

  
            {/* Nh√¢n v·∫≠t */}
            <div className="character-wrapper">
            <img 
              src={characterImg} 
              alt="Character" 
              className="character-model" 
            />
            {/* H·ªôp tho·∫°i */}
            {dialogStep !== -1 && (
              <div className="dialog-box">
                <p>{dialogues[dialogStep]}</p>
                <button onClick={handleNextDialog}>Ti·∫øp t·ª•c</button>
              </div>
            )}
            </div>
  
            {/* morse table */}
            <div className="image-container">
                {!(sgfinish && hnfinish) && (<img src={morsetable} alt="mtable" className="mtable" />)}
            </div>

            {/*  */}


            <div className="audio-buttons">
  {/* C·∫∑p 1: M·∫≠t m√£ t·ª´ S√†i G√≤n */}
  <div className="audio-group">
  <button onClick={() => new Audio(m1).play()}>M·∫≠t m√£ t·ª´ S√†i G√≤n</button>
  <div className="decode-input">
    <input
      type="text"
      placeholder="Gi·∫£i m√£ g·∫•p!!!"
      value={inputSG}
      onChange={(e) => setInputSG(e.target.value)}
      onKeyDown={(e) => {
        if (e.key === 'Enter' && !sgfinish) {
          handleSubmitSG();
        }
      }}
      style={{
        borderColor: sgfinish ? 'green' : 'initial',
        opacity: sgfinish ? 0.5 : 1, // l√†m m·ªù khi ho√†n th√†nh
        pointerEvents: sgfinish ? 'none' : 'auto' // kh√¥ng cho ch·ªânh khi ƒë√£ xong
      }}
    />
    <button onClick={handleSubmitSG} disabled={sgfinish}>
      Submit
    </button>
    {!sgfinish && inputSG && (
      <p style={{ color: 'red', fontSize: '20px' }}>
        üéñÔ∏è Nhanh ch√≥ng, ch√≠nh x√°c, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi!
      </p>
    )}
    {sgfinish && (
      <p style={{ color: 'green', fontSize: '20px', opacity: 0.5 }}>
        ‚úÖ ƒê√£ gi·∫£i m√£ th√†nh c√¥ng!
      </p>
    )}
  </div>
</div>


  {/* C·∫∑p 2: M·∫≠t m√£ t·ª´ H√† N·ªôi */}
  <div className="audio-group">
  <button onClick={() => new Audio(m2).play()}>M·∫≠t m√£ t·ª´ H√† N·ªôi</button>
  <div className="decode-input">
    <input
      type="text"
      placeholder="Gi·∫£i m√£ g·∫•p!!!"
      value={inputHN}
      onChange={(e) => setInputHN(e.target.value)}
      onKeyDown={(e) => {
        if (e.key === 'Enter' && !hnfinish) {
          handleSubmitHN();
        }
      }}
      style={{
        borderColor: hnfinish ? 'green' : 'initial',
        opacity: hnfinish ? 0.5 : 1, // l√†m m·ªù khi ho√†n th√†nh
        pointerEvents: hnfinish ? 'none' : 'auto' // kh√¥ng cho ch·ªânh khi ƒë√£ xong
      }}
    />
    <button onClick={handleSubmitHN} disabled={hnfinish}>
      Submit
    </button>
    {!hnfinish && inputHN && (
      <p style={{ color: 'red', fontSize: '20px' }}>
        üéñÔ∏è Nhanh ch√≥ng, ch√≠nh x√°c, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi!
      </p>
    )}
    {hnfinish && (
      <p style={{ color: 'green', fontSize: '20px', opacity: 0.5 }}>
        ‚úÖ ƒê√£ gi·∫£i m√£ th√†nh c√¥ng!
      </p>
    )}
  </div>
</div>


</div>
         
            {/* Nh·∫°c n·ªÅn */}
            {audioPlaying && (
              <ReactAudioPlayer
                src={audioFile}
                autoPlay
                loop
                controls={false}
                onError={() => console.log("Error loading audio")}
              />
            )}
          </div>
        )}
      </>
    );
  };
  
 
export default Morse;