import React, { useState, useEffect } from 'react';
import Loading from './Loading';  
import '../../styles/CuChiStyle/CuChiGameG1.css';
import '../../styles/CuChiStyle/usequiz.css';
import ReactAudioPlayer from 'react-audio-player';
import audioFile from '../../assets/CuChiGame/audio/Cuchisound.mp3'; // Import t·ªáp √¢m thanh
import characterImg from '../../assets/CuChiGame/images/MODEL_CUCHI_NOBG.png'; // Nh√¢n v·∫≠t
import { useNavigate } from 'react-router-dom';
import diadaomap from '../../assets/CuChiGame/images/Bandodiadao.jpg';//b·∫£n ƒë·ªì ƒë·ªãa ƒë·∫°o
import didaodist from '../../assets/CuChiGame/images/khoangcachdiadao.jpg';//v·ªã tr√≠ ƒë·ªãa ƒë·∫°o
import Usequiz from "./Usequiz";


const CuChiGameG1 = () => {
  const [loading, setLoading] = useState(true);
  const [dialogStep, setDialogStep] = useState(0); // B·∫Øt ƒë·∫ßu lu√¥n t·ª´ c√¢u ƒë·∫ßu
  const [showAlert, setShowAlert] = useState(true); // Qu·∫£n l√Ω tr·∫°ng th√°i alert
  const [audioPlaying, setAudioPlaying] = useState(false); // Tr·∫°ng th√°i nh·∫°c
  const navigate = useNavigate();

  const dialogues = [
    'Ch√†o ƒë·ªìng ch√≠, ƒë√¢y l√† khu cƒÉn c·ª© ƒë·ªãa C·ªß Chi!',
    'Ch√†o m·ª´ng ƒë·ªìng ch√≠ t√¨nh b√°o ƒë√£ ƒë·∫øn ƒë√¢y, ƒë·ªìng ch√≠ h√£y t√¨m hi·ªÉu v√† ho√†n th√†nh t·ªët nhi·ªám v·ª• ƒë∆∞·ª£c giao.',
    'ƒê·ªìng ch√≠ h√£y lu√¥n trong t∆∞ th·∫ø s·∫µn s√†ng chi·∫øn ƒë·∫•u !!!!!!!!!',
    'B·∫Øt ƒë·∫ßu th√¥i n√†o!',
    'C√≥ v·∫ª ƒë·ªìng ch√≠ l√† ng∆∞·ªùi m·ªõi t√¥i s·∫Ω gi·∫£i th√≠ch m·ªôt ch√∫t v·ªÅ n∆°i n√†y ƒë·ªÉ ƒë·ªìng ch√≠ n·∫Øm b·∫Øt.',
    'ƒê·ªãa ƒë·∫°o C·ªß Chi, c√°ch TP.HCM kho·∫£ng 70km v·ªÅ ph√≠a T√¢y B·∫Øc, l√† bi·ªÉu t∆∞·ª£ng cho s·ª± s√°ng t·∫°o v√† ki√™n c∆∞·ªùng c·ªßa qu√¢n v√† d√¢n C·ªß Chi trong cu·ªôc kh√°ng chi·∫øn ch·ªëng M·ªπ.',
    'H·ªá th·ªëng c·ªßa ta g·ªìm c√°c ƒë∆∞·ªùng h·∫ßm ƒë·ªì s·ªô v·ªõi kho·∫£ng 250km ƒë∆∞·ªùng h·∫ßm t·ªèa r·ªông nh∆∞ m·∫°ng nh·ªán, v√† g·ªìm nhi·ªÅu c√¥ng tr√¨nh li√™n ho√†n nh∆∞ chi·∫øn h√†o, ·ª• chi·∫øn ƒë·∫•u, h·∫ßm ƒÉn ng·ªß, h·ªôi h·ªçp, qu√¢n y, kho t√†ng, gi·∫øng n∆∞·ªõc, b·∫øp Ho√†ng C·∫ßm.',
    'N∆°i ƒë√¢y ƒë√£ h√¨nh th√†nh t·ª´ nh·ªØng h·∫ßm b√≠ m·∫≠t th·ªùi kh√°ng chi·∫øn ch·ªëng Ph√°p, v√† ·ªü giai ƒëo·∫°n kh√°ng chi·∫øn ch·ªëng M·ªπ n√†y n√≥ l·∫°i c√†n ph√°t tri·ªÉn m·∫°nh m·∫Ω h∆°n, ƒë·∫∑c bi·ªát sau c√°c cu·ªôc c√†n qu√©t l·ªõn c·ªßa ƒë·ªãch.',
    'Bi·ªát danh "L√†ng ng·∫ßm trong l√≤ng ƒë·∫•t": Th·ªÉ hi·ªán r√µ n√©t cu·ªôc s·ªëng v√† chi·∫øn ƒë·∫•u di·ªÖn ra d∆∞·ªõi l√≤ng ƒë·∫•t c·ªßa ch√∫ng t√¥i nh·ªØng con ng∆∞·ªùi C·ªß Chi.',
    'H√£y kh·∫Øc s√¢u nh·ªØng k·ª≥ t√≠ch h√†o h√πng n√†y ƒë·ªÉ mai n√†y khi th·ªëng nh·∫•t n√≥ kh√¥ng b·ªã mai m·ªôt ƒëi.',

  ];

  // quiz 
  const questions = [
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi n·∫±m ·ªü t·ªânh/th√†nh n√†o?",
      options: ["H√† N·ªôi", "ƒê√† N·∫µng", "TP. H·ªì Ch√≠ Minh", "Hu·∫ø"],
      answer: "TP. H·ªì Ch√≠ Minh",
    },
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi d√†i kho·∫£ng bao nhi√™u km?",
      options: ["10km", "50km", "120km", "250km"],
      answer: "250km",
    },
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi ƒë∆∞·ª£c x√¢y d·ª±ng trong giai ƒëo·∫°n n√†o?",
      options: [
        "Kh√°ng chi·∫øn ch·ªëng Ph√°p",
        "Chi·∫øn tranh th·∫ø gi·ªõi th·ª© 2",
        "Chi·∫øn tranh ƒê√¥ng D∆∞∆°ng",
        "Kh√°ng chi·∫øn ch·ªëng M·ªπ",
      ],
      answer: "Kh√°ng chi·∫øn ch·ªëng M·ªπ",
    },
  ];

  const {
    currentQuestion,
    currentIndex,
    score,
    isFinished,
    selectedOption,
    selectOption,
    nextQuestion,
    restart,
    totalQuestions,
  } = Usequiz(questions);

///


  useEffect(() => {
    // Th·ªùi gian ch·ªù cho loading
    const timer = setTimeout(() => setLoading(false), 3000);
    return () => clearTimeout(timer);
  }, []);

  const handleNextDialog = () => {
    if (dialogStep < dialogues.length - 1) {
      setDialogStep(dialogStep + 1);
    } else {
      // K·∫øt th√∫c h·ªôi tho·∫°i, ·∫©n text box
      setDialogStep(-1);
      navigate('/morse');
    }
  };

// ph√°t nh·∫°c li√™n t·ª•c
 useEffect(() => {
    const audio = new Audio(audioFile);
    audio.loop = true; // Ph√°t nh·∫°c li√™n t·ª•c
    audio.play().catch((err) => console.log("Error playing audio:", err));
  }, []);

//


  // H√†m x·ª≠ l√Ω khi click v√†o b·∫•t k·ª≥ ƒë√¢u
  const handleClickAnywhere = () => {
    if (!audioPlaying) {
      setAudioPlaying(true);
    }
  };

  return (
    <>
      {loading ? (
        <Loading />
      ) : (
        <div className="cuchigameg1-background" onClick={handleClickAnywhere}>
          {/* Alert thanh th√¥ng b√°o */}
          {showAlert && (
            <div className="alert-banner">
              üéñÔ∏è Ch√†o m·ª´ng ƒë·ªìng ch√≠ ƒë·∫øn v·ªõi chi·∫øn tr∆∞·ªùng C·ªß Chi! <br />
              üéñÔ∏è Tr·∫£ l·ªùi quizz ƒë·ªÉ nh·∫≠n th√™m exp v√† v√†ng 
              <button className="close-alert" onClick={() => setShowAlert(false)}>
                ‚ùå
              </button>
            </div>
          )}

          {/* Nh√¢n v·∫≠t */}
          <div className="character-wrapper">
          <img 
            src={characterImg} 
            alt="Character" 
            className="character-model" 
          />
          {/* H·ªôp tho·∫°i */}
          {dialogStep !== -1 && (
            <div className="dialog-box">
              <p>{dialogues[dialogStep]}</p>
              <button onClick={handleNextDialog}>Ti·∫øp t·ª•c</button>
            </div>
          )}
          </div>


            <div className="image-container">
            <div className="image-container">
                { dialogStep >= 6  && <img src={diadaomap} alt="map" className="map" />}
                {  dialogStep >= 5  && <img src={didaodist} alt="dist" className="dist" />}
          </div>
          </div>


          {/* quiz */}
          { !isFinished  && dialogStep >= 7 && currentQuestion && <div className="quiz-container">
  <p className="quiz-question">{currentQuestion.question}</p>
  <div className="quiz-options">
    {currentQuestion.options.map((option) => (
      <button
        className={`quiz-option ${
          selectedOption
            ? option === currentQuestion.answer
              ? "correct"
              : option === selectedOption
              ? "incorrect"
              : ""
            : ""
        }`}
        onClick={() => selectOption(option)}
        disabled={!!selectedOption}
      >
        {option}
      </button>
    ))}
  </div>

  {selectedOption && (
    <button onClick={nextQuestion} className="quiz-button">
      Ti·∫øp t·ª•c
    </button>
  )}
</div>}
          {/* quiz */}
          
          
          {/* Nh·∫°c n·ªÅn */}
          {/* {audioPlaying && (
            <ReactAudioPlayer
              src={audioFile}
              autoPlay
              loop
              controls={false}
              onError={() => console.log("Error loading audio")}
            />
          )} */}
        </div>
      )}
    </>
  );
};

export default CuChiGameG1;
