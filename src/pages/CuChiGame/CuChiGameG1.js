import React, { useState, useEffect } from 'react';
import CuChiLoading from './CuChiLoading';  
import '../../styles/CuChiStyle/CuChiGameG1.css';
import '../../styles/CuChiStyle/usequiz.css';
import ReactAudioPlayer from 'react-audio-player';
import audioFile from '../../assets/CuChiGame/audio/Cuchisound.mp3';
import characterImg from '../../assets/CuChiGame/images/MODEL_CUCHI_NOBG.png';
import { useNavigate } from 'react-router-dom';
import diadaomap from '../../assets/CuChiGame/images/Bandodiadao.jpg';
import didaodist from '../../assets/CuChiGame/images/khoangcachdiadao.jpg';
import Usequiz from "./Usequiz";

// Add a style to control transitions
const noTransitionStyle = {
  transition: 'none'
};


const CuChiGameG1 = () => {
  const [loading, setLoading] = useState(true);
  const [dialogStep, setDialogStep] = useState(0);
  const [audioPlaying, setAudioPlaying] = useState(false);
  const navigate = useNavigate();

  const dialogues = [
    'Ch√†o ƒë·ªìng ch√≠, ƒë√¢y l√† khu cƒÉn c·ª© ƒë·ªãa C·ªß Chi!',
    'Ch√†o m·ª´ng ƒë·ªìng ch√≠ t√¨nh b√°o ƒë√£ ƒë·∫øn ƒë√¢y, ƒë·ªìng ch√≠ h√£y t√¨m hi·ªÉu v√† ho√†n th√†nh t·ªët nhi·ªám v·ª• ƒë∆∞·ª£c giao.',
    'ƒê·ªìng ch√≠ h√£y lu√¥n trong t∆∞ th·∫ø s·∫µn s√†ng chi·∫øn ƒë·∫•u !!!!!!!!!',
    'B·∫Øt ƒë·∫ßu th√¥i n√†o!',
    'C√≥ v·∫ª ƒë·ªìng ch√≠ l√† ng∆∞·ªùi m·ªõi t√¥i s·∫Ω gi·∫£i th√≠ch m·ªôt ch√∫t v·ªÅ n∆°i n√†y ƒë·ªÉ ƒë·ªìng ch√≠ n·∫Øm b·∫Øt.',
    'ƒê·ªãa ƒë·∫°o C·ªß Chi, c√°ch TP.HCM kho·∫£ng 70km v·ªÅ ph√≠a T√¢y B·∫Øc, l√† bi·ªÉu t∆∞·ª£ng cho s·ª± s√°ng t·∫°o v√† ki√™n c∆∞·ªùng c·ªßa qu√¢n v√† d√¢n C·ªß Chi trong cu·ªôc kh√°ng chi·∫øn ch·ªëng M·ªπ.',
    'H·ªá th·ªëng c·ªßa ta g·ªìm c√°c ƒë∆∞·ªùng h·∫ßm ƒë·ªì s·ªô v·ªõi kho·∫£ng 250km ƒë∆∞·ªùng h·∫ßm t·ªèa r·ªông nh∆∞ m·∫°ng nh·ªán...',
    'N∆°i ƒë√¢y ƒë√£ h√¨nh th√†nh t·ª´ nh·ªØng h·∫ßm b√≠ m·∫≠t th·ªùi kh√°ng chi·∫øn ch·ªëng Ph√°p...',
    'Bi·ªát danh "L√†ng ng·∫ßm trong l√≤ng ƒë·∫•t": Th·ªÉ hi·ªán r√µ n√©t cu·ªôc s·ªëng v√† chi·∫øn ƒë·∫•u di·ªÖn ra d∆∞·ªõi l√≤ng ƒë·∫•t...',
    'H√£y kh·∫Øc s√¢u nh·ªØng k·ª≥ t√≠ch h√†o h√πng n√†y ƒë·ªÉ mai n√†y khi th·ªëng nh·∫•t n√≥ kh√¥ng b·ªã mai m·ªôt ƒëi.',
  ];

  const questions = [
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi n·∫±m ·ªü t·ªânh/th√†nh n√†o?",
      options: ["H√† N·ªôi", "ƒê√† N·∫µng", "TP. H·ªì Ch√≠ Minh", "Hu·∫ø"],
      answer: "TP. H·ªì Ch√≠ Minh",
    },
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi d√†i kho·∫£ng bao nhi√™u km?",
      options: ["10km", "50km", "120km", "250km"],
      answer: "250km",
    },
    {
      question: "ƒê·ªãa ƒë·∫°o C·ªß Chi ƒë∆∞·ª£c x√¢y d·ª±ng trong giai ƒëo·∫°n n√†o?",
      options: [
        "Kh√°ng chi·∫øn ch·ªëng Ph√°p",
        "Chi·∫øn tranh th·∫ø gi·ªõi th·ª© 2",
        "Chi·∫øn tranh ƒê√¥ng D∆∞∆°ng",
        "Kh√°ng chi·∫øn ch·ªëng M·ªπ",
      ],
      answer: "Kh√°ng chi·∫øn ch·ªëng M·ªπ",
    },
  ];

  const {
    currentQuestion,
    currentIndex,
    score,
    isFinished,
    selectedOption,
    selectOption,
    nextQuestion,
    restart,
    totalQuestions,
  } = Usequiz(questions);

// <<<<<<< HEAD
  const handleLoadingComplete = () => {
    // Immediately remove loading screen without transition
    setLoading(false);
  };
// =======
  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 3000);
    return () => clearTimeout(timer);
  }, []);
// >>>>>>> origin/hompageupdate

  const handleClickAnywhere = () => {
    if (!audioPlaying) setAudioPlaying(true);

    // N·∫øu ch∆∞a ƒë·∫øn ƒëo·∫°n quiz
    if (dialogStep < 7) {
      setDialogStep(prev => prev + 1);
    }

    // N·∫øu ƒë√£ xong quiz v√† c√≤n tho·∫°i th√¨ ti·∫øp t·ª•c tho·∫°i
    if (dialogStep >= 7 && isFinished && dialogStep < dialogues.length - 1) {
      setDialogStep(prev => prev + 1);
    }

    // N·∫øu ƒë√£ xong h·∫øt th√¨ chuy·ªÉn m√†n
    if (dialogStep >= dialogues.length - 1 && isFinished) {
      setDialogStep(-1);
      navigate('/morse');
    }
  };


// ph√°t nh·∫°c li√™n t·ª•c
// useEffect(() => {
//   const audio = new Audio(audioFile);
//   audio.loop = true;

//   audio.play().catch((err) => console.log("Error playing audio:", err));

//   // return () => {
//   //   audio.pause();        // üëà D·ª´ng nh·∫°c
//   //   audio.currentTime = 0; // üëà Reset v·ªÅ ƒë·∫ßu (tu·ª≥ ch·ªçn)
//   // };
// }, []);


//


  // // H√†m x·ª≠ l√Ω khi click v√†o b·∫•t k·ª≥ ƒë√¢u
  // const handleClickAnywhere = () => {
  //   if (!audioPlaying) {
  //     setAudioPlaying(true);
  //   }
  // };


  return (
    <>
      {loading ? (
        <CuChiLoading onLoadingComplete={handleLoadingComplete} />
      ) : (
// <<<<<<< HEAD
//         <div className="cuchigameg1-background" style={noTransitionStyle} onClick={handleClickAnywhere}>
//           {/* Alert thanh th√¥ng b√°o */}
//           {showAlert && (
//             <div className="alert-banner">
//               üéñÔ∏è Ch√†o m·ª´ng ƒë·ªìng ch√≠ ƒë·∫øn v·ªõi chi·∫øn tr∆∞·ªùng C·ªß Chi! <br />
//               üéñÔ∏è Tr·∫£ l·ªùi quizz ƒë·ªÉ nh·∫≠n th√™m exp v√† v√†ng 
//               <button className="close-alert" onClick={() => setShowAlert(false)}>
//                 ‚ùå
//               </button>
// =======
        <div className="cuchigameg1-background" onClick={handleClickAnywhere}>
          <div className="character-wrapper">
            <img src={characterImg} alt="Character" className="character-model" />

            {/* H·ªôp tho·∫°i ch·ªâ hi·ªán khi KH√îNG trong ph·∫ßn quiz */}
            {dialogStep !== -1 && (dialogStep < 7 || isFinished) && (
              <div className="dialog-box">
                <p>{dialogues[dialogStep]}</p>
              </div>
            )}
          </div>

          <div className="image-container">
            {dialogStep >= 6 && <img src={diadaomap} alt="map" className="map" />}
            {dialogStep >= 5 && <img src={didaodist} alt="dist" className="dist" />}
          </div>

          {/* Quiz ch·ªâ hi·ªán t·ª´ dialogStep >= 7 v√† ch∆∞a xong */}
          {!isFinished && dialogStep >= 7 && currentQuestion && (
            <div className="quiz-container">
              <p className="quiz-question">{currentQuestion.question}</p>
              <div className="quiz-options">
                {currentQuestion.options.map((option) => (
                  <button
                    key={option}
                    className={`quiz-option ${
                      selectedOption
                        ? option === currentQuestion.answer
                          ? "correct"
                          : option === selectedOption
                          ? "incorrect"
                          : ""
                        : ""
                    }`}
                    onClick={() => selectOption(option)}
                    disabled={!!selectedOption}
                  >
                    {option}
                  </button>
                ))}
              </div>
              {selectedOption && (
                <button
                onClick={() => {
                  if (currentIndex === totalQuestions - 1) {
                    // Quiz v·ª´a ho√†n t·∫•t => hi·ªán dialog ti·∫øp
                    nextQuestion();
                    setDialogStep((prev) => prev + 1);
                  } else {
                    nextQuestion();
                  }
                }}
                className="quiz-button"
              >
                  Ti·∫øp t·ª•c
                </button>
              )}

            </div>
          )}



            <div className="image-container">
            <div className="image-container">
                { dialogStep >= 6  && <img src={diadaomap} alt="map" className="map" />}
                {  dialogStep >= 5  && <img src={didaodist} alt="dist" className="dist" />}
          </div>
          </div>


          {/* quiz */}
          { !isFinished  && dialogStep >= 7 && currentQuestion && <div className="quiz-container">
  <p className="quiz-question">{currentQuestion.question}</p>
  <div className="quiz-options">
    {currentQuestion.options.map((option) => (
      <button
        className={`quiz-option ${
          selectedOption
            ? option === currentQuestion.answer
              ? "correct"
              : option === selectedOption
              ? "incorrect"
              : ""
            : ""
        }`}
        onClick={() => selectOption(option)}
        disabled={!!selectedOption}
      >
        {option}
      </button>
    ))}
  </div>

  {selectedOption && (
    <button onClick={nextQuestion} className="quiz-button">
      Ti·∫øp t·ª•c
    </button>
  )}
</div>}
          {/* quiz */}
          
          
          {/* Nh·∫°c n·ªÅn */}
          

          {audioPlaying && (

            <ReactAudioPlayer
              src={audioFile}
              autoPlay
              loop
              controls={false}
              onError={() => console.log("Error loading audio")}
            />
          )} 


        </div>
      )}
    </>
  );
};

export default CuChiGameG1;
